name: Build

on:
  push:
    branches:
      - '*'

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: 'us-east-1'
  AWS_S3_RELEASES_BUCKET: 'btp-cimarron-releases'
  NOVA_PASSWORD: ${{ secrets.NOVA_4_PASSWORD }}
  TEST: ${{ secrets.TEST }}

jobs:
  lint-js:
    runs-on: ubuntu-20.04

    steps:
      - name: Git checkout Core
        uses: actions/checkout@v2

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: 14

      - name: Cache Node Modules
        id: cache-node-modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: node-modules-${{ hashFiles('package-lock.json') }}

      - name: Install modules
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm i

      - name: Lint frontend
        run: npm run eslint

  build-frontend:
    runs-on: ubuntu-20.04

    steps:
      - name: Git checkout Core
        uses: actions/checkout@v2

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: 14

      - name: Cache Node Modules
        id: cache-node-modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: node-modules-${{ hashFiles('package-lock.json') }}

      - name: Install modules
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm i

      - name: Build frontend
        run: npm run prod

      - name: Save frontend build
        uses: actions/upload-artifact@v2
        with:
          name: frontend
          path: public/

  build-backend:
    runs-on: ubuntu-20.04
    steps:
      - name: Git checkout Core
        uses: actions/checkout@v2

      - name: Use php 8.1
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          tools: composer
          coverage: none

      - name: Get composer cache directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install php dependencies
        run: |
          composer config http-basic.nova.laravel.com roeland@bythepixel.com ${{ env.TEST }}
          composer install --no-interaction --no-plugins --no-scripts --no-dev --prefer-dist --optimize-autoloader --ignore-platform-reqs

      - name: Publish Nova assets
        run: |
          php artisan --env=github-runner nova:publish

      - name: Create artifact
        run: tar -zcf /tmp/backend.tar.gz ./

      - name: Save backend build
        uses: actions/upload-artifact@v2
        with:
          name: backend
          path: /tmp/backend.tar.gz

  test-backend:
    runs-on: ubuntu-20.04
    steps:
      - name: Install PHP 8.1
        uses: shivammathur/setup-php@15c43e89cdef867065b0213be354c2841860869e
        with:
          php-version: '8.1'

      - name: Git Checkout Core
        uses: actions/checkout@v3

      - name: Copy .env
        run: php -r "file_exists('.env') || copy('.env.local.example', '.env');"

      - name: Install Dependencies
        run: |
          composer config http-basic.nova.laravel.com roeland@bythepixel.com ${{ env.NOVA_PASSWORD }}
          composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

      - name: Setup MySQL
        uses: mirromutth/mysql-action@v1.1
        with:
          mysql database: testing
          mysql user: sail
          mysql password: password

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: 14

      - name: Cache Node Modules
        id: cache-node-modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: node-modules-${{ hashFiles('package-lock.json') }}

      - name: Install modules
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm i

      - name: Build frontend
        run: npm run prod

      - name: Generate key
        run: php artisan key:generate

      - name: Directory Permissions
        run: chmod -R 777 storage bootstrap/cache

      - name: Execute tests (Unit and Feature tests) via PHPUnit
        env:
          DB_CONNECTION: test
          DB_HOST: 0.0.0.0:3306
        run: php artisan test

  lint-php:
    runs-on: ubuntu-20.04
    steps:
      - name: Git checkout Core
        uses: actions/checkout@v2

      - name: Install PHP Code Sniffer
        run: composer global require "squizlabs/php_codesniffer"

      - name: Run PHP Code Sniffer
        run: php ~/.composer/vendor/bin/phpcs

  # create-release-artifact:
  #   needs: [lint-js, build-frontend, lint-php, build-backend]
  #   runs-on: ubuntu-20.04
  #   steps:
  #     - name: Download and combine frontend and backend
  #       uses: actions/download-artifact@v2

  #     - name: Extract and move artifacts into release folder
  #       run: |
  #         mkdir release
  #         tar -zxf backend/backend.tar.gz -C release
  #         cp -r frontend/* release/public
  #     - name: Remove files not necessary for release
  #       working-directory: release
  #       run: |
  #         rm -rf .github
  #         rm -rf tests
  #     - name: Create final release artifact
  #       run: tar -zcvf /tmp/${{ github.sha }}.tar.gz -C release .

  #     - name: Send release artifact to s3
  #       run: aws s3 cp /tmp/${{ github.sha }}.tar.gz s3://${{ env.AWS_S3_RELEASES_BUCKET }}/
