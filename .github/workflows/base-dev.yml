name: Deploy to Base Template Dev Server

on:
  push:
    branches:
      - base-development

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: 'us-east-1'
  SERVER_IP: '3.86.3.247'

jobs:
  deploy-staging:
    runs-on: ubuntu-22.04
    steps:
      - name: Temporarily punch a hole in VPC to allow runner to access servers via ssh
        uses: sohelamin/aws-security-group-add-ip-action@v1.0.1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          aws-security-group-id: 'sg-0793eb4790627e45d'

      - name: Wait for build to finish
        uses: fountainhead/action-wait-for-check@v1.0.0
        id: wait-for-build
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          checkName: create-release-artifact
          timeoutSeconds: 300

      - name: Handle failed build
        if: steps.wait-for-build.outputs.conclusion != 'success'
        run: exit 1

      - name: Download artifact
        run: aws s3 cp s3://btp-bythepixel-builds/${{ github.sha }}.tar.gz ${{ github.sha }}.tar.gz

      - name: Extract artifact
        run: mkdir release && tar -zxf ${{ github.sha }}.tar.gz -C release

      - name: Prep ssh access update
        run: |
          wget -O authorized_keys_temp https://btp-devops.s3.amazonaws.com/authorized_keys
          cat release/provisioning/deployer.pub authorized_keys_temp > authorized_keys

      - name: Update SSH Access
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ env.SERVER_IP }}
          username: app-user
          key: ${{ secrets.PRIVATE_KEY }}
          source: 'authorized_keys'
          target: ~/.ssh

      - name: Handle environment specific tasks
        working-directory: release
        run: |
          mv .env.staging .env
          sudo sed -i -r "s|\{AWS_ACCESS_KEY_ID\}|${{ env.AWS_ACCESS_KEY_ID }}|" .env
          sudo sed -i -r "s|\{AWS_SECRET_ACCESS_KEY\}|${{ env.AWS_SECRET_ACCESS_KEY }}|" .env
          sudo sed -i -r "s|\{NOVA_LICENSE_KEY\}|${{ secrets.NOVA_LICENSE_KEY }}|" .env
          sudo sed -i -r "s|\{DB_PASSWORD\}|${{ secrets.DB_PASSWORD }}|" .env
          mv provisioning/robots/robots.staging.txt public/robots.txt

      - name: Copy release to servers using scp
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ env.SERVER_IP }}
          username: app-user
          key: ${{ secrets.PRIVATE_KEY }}
          source: 'release/*'
          target: ~/releases/${{ github.sha }}
          strip_components: 1

      - name: Run migrations on one server only
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ env.SERVER_IP }}
          key: ${{ secrets.PRIVATE_KEY }}
          username: app-user
          script_stop: true
          script: |
            cd ~/releases/${{ github.sha }}
            php artisan migrate --force

      - name: Flip to new release and run post deploy processes
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ env.SERVER_IP }}
          key: ${{ secrets.PRIVATE_KEY }}
          username: app-user
          script_stop: true
          script: |
            sudo rm -rf /srv/www
            sudo ln -s ~/releases/${{ github.sha }} /srv/www
            sudo rm -rf /srv/www/storage/app/.glide-cache
            sudo ln -s /srv/storage/.glide-cache /srv/www/storage/app/.glide-cache
            cd releases && ls -1t | tail -n +5 | xargs rm -rf
            cd /srv/www
            php artisan config:cache
            mv /srv/www/provisioning/.bash_aliases ~
            source ~/.bashrc
